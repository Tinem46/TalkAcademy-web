import React, { useState, useEffect } from "react";
import { Button, Form, Input, Spin, message } from "antd";
import { useNavigate, useSearchParams, Link } from "react-router-dom";
import { LockOutlined, ArrowLeftOutlined, CheckCircleOutlined } from "@ant-design/icons";
import "./index.scss";
import AuthLayout from "../../components/auth-layout";
import { toast } from "react-toastify";
import Swal from "sweetalert2";
import { authAPI } from "../../config/api";

const ResetPassword = () => {
    const [loading, setLoading] = useState(false);
    const [resetSuccess, setResetSuccess] = useState(false);
    const [searchParams] = useSearchParams();
    const navigate = useNavigate();

    const email = searchParams.get('email');
    const otp = searchParams.get('otp');

    useEffect(() => {
        if (!email || !otp) {
            message.error('Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u');
            navigate('/forgot-password');
        }
    }, [email, otp, navigate]);

    const handleResetPassword = async (values) => {
        if (values.newPassword !== values.confirmPassword) {
            message.error('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!');
            return;
        }

        setLoading(true);
        try {
            const response = await authAPI.resetPassword(email, otp, values.newPassword);
            console.log("Reset password response:", response);

            if (response?.statusCode === 201) {
                setResetSuccess(true);
                await Swal.fire({
                    title: "üéâ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!",
                    text: "M·∫≠t kh·∫©u c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t. B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v·ªõi m·∫≠t kh·∫©u m·ªõi.",
                    icon: "success",
                    confirmButtonText: "ƒêƒÉng nh·∫≠p ngay",
                });
                navigate('/login');
            } else {
                toast.error(response?.message || "C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u!");
            }
        } catch (err) {
            console.error("Reset password error:", err);
            if (err.response?.data) {
                console.log("Backend response:", err.response.data);
                toast.error(err.response.data?.message || "C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u!");
            } else {
                toast.error("L·ªói k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i.");
            }
        } finally {
            setLoading(false);
        }
    };

    const handleBackToLogin = () => {
        navigate("/login");
    };

    if (resetSuccess) {
        return (
            <AuthLayout>
                <div className="success-container">
                    <div className="success-content">
                        <div className="success-icon">
                            <CheckCircleOutlined />
                        </div>
                        <h2 className="success-title">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!</h2>
                        <p className="success-description">
                            M·∫≠t kh·∫©u c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng.
                            B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v·ªõi m·∫≠t kh·∫©u m·ªõi.
                        </p>
                        <Button
                            type="primary"
                            size="large"
                            onClick={handleBackToLogin}
                            className="back-to-login-btn"
                        >
                            <ArrowLeftOutlined />
                            ƒêƒÉng nh·∫≠p ngay
                        </Button>
                    </div>
                </div>
            </AuthLayout>
        );
    }

    return (
        <AuthLayout>
            <Form
                layout="vertical"
                onFinish={handleResetPassword}
                className="reset-form"
                data-aos="fade-up"
            >
                <div className="form-header">
                  
                    <h2 className="form-title">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
                    <p className="form-description">
                        Nh·∫≠p m·∫≠t kh·∫©u m·ªõi cho t√†i kho·∫£n <strong>{email}</strong>
                    </p>
                </div>

                <Form.Item
                    name="newPassword"
                    rules={[
                        { required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi" },
                        { min: 6, message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±" }
                    ]}
                >
                    <Input.Password
                        prefix={<LockOutlined />}
                        placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
                        size="large"
                    />
                </Form.Item>

                <Form.Item
                    name="confirmPassword"
                    rules={[
                        { required: true, message: "Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u" },
                        ({ getFieldValue }) => ({
                            validator(_, value) {
                                if (!value || getFieldValue('newPassword') === value) {
                                    return Promise.resolve();
                                }
                                return Promise.reject(new Error('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!'));
                            },
                        }),
                    ]}
                >
                    <Input.Password
                        prefix={<LockOutlined />}
                        placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi"
                        size="large"
                    />
                </Form.Item>

                <Form.Item>
                    <Button
                        type="primary"
                        htmlType="submit"
                        block
                        disabled={loading}
                        className="reset-btn"
                        size="large"
                    >
                        {loading ? <Spin size="small" /> : "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u"}
                    </Button>
                </Form.Item>

                <div className="form-footer">
                    <p>
                        Nh·ªõ m·∫≠t kh·∫©u? <Link to="/login">ƒêƒÉng nh·∫≠p ngay</Link>
                    </p>
                </div>
            </Form>
        </AuthLayout>
    );
};

export default ResetPassword;
