import { GoogleGenerativeAI } from '@google/generative-ai';

// API Key - s·ª≠ d·ª•ng tr·ª±c ti·∫øp ƒë·ªÉ tr√°nh v·∫•n ƒë·ªÅ environment variables
const API_KEY = 'AIzaSyDAou0lcUSAPHTUCI6YH4RQ2QUa-BLFs-o';

console.log('üîë Using hardcoded API Key:', API_KEY.substring(0, 10) + '...');
console.log('‚úÖ Gemini API Key ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh tr·ª±c ti·∫øp');

// Kh·ªüi t·∫°o Gemini AI
const genAI = new GoogleGenerativeAI(API_KEY);

// C·∫•u h√¨nh model ƒë∆°n gi·∫£n
const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp"
});

// System prompt cho Talkademy
const SYSTEM_PROMPT = `
B·∫°n l√† AI Assistant c·ªßa Talkademy - n·ªÅn t·∫£ng h·ªçc ti·∫øng Vi·ªát tr·ª±c tuy·∫øn h√†ng ƒë·∫ßu.

TH√îNG TIN V·ªÄ TALKADEMY:
- Talkademy l√† n·ªÅn t·∫£ng h·ªçc ti·∫øng Vi·ªát cho ng∆∞·ªùi n∆∞·ªõc ngo√†i
- S·ª≠ d·ª•ng c√¥ng ngh·ªá AI ƒë·ªÉ ph√¢n t√≠ch ph√°t √¢m theo th·ªùi gian th·ª±c
- Cung c·∫•p 3 mi·ªÅn gi·ªçng: B·∫Øc, Trung, Nam
- C√≥ app mobile h·ªó tr·ª£ h·ªçc offline
- H·ªá th·ªëng flashcards, b√†i t·∫≠p t∆∞∆°ng t√°c, theo d√µi ti·∫øn ƒë·ªô

G√ìI H·ªåC:
1. G√≥i C∆° b·∫£n (199k/th√°ng): B√†i h·ªçc c∆° b·∫£n
2. G√≥i N√¢ng cao (399k/th√°ng): C√≥ th√™m AI tutor
3. G√≥i Premium (699k/th√°ng): Full t√≠nh nƒÉng + 1-1 coaching

∆ØU ƒê√ÉI HI·ªÜN T·∫†I:
- Gi·∫£m 50% cho h·ªçc vi√™n m·ªõi
- H·ªçc th·ª≠ mi·ªÖn ph√≠ 7 ng√†y
- Ho√†n ti·ªÅn 100% n·∫øu kh√¥ng h√†i l√≤ng trong 30 ng√†y

QUY TR√åNH H·ªåC:
1. ƒê√°nh gi√° tr√¨nh ƒë·ªô
2. L·ªô tr√¨nh c√° nh√¢n h√≥a
3. H·ªçc theo module (15-30 ph√∫t/b√†i)
4. Luy·ªán t·∫≠p th·ª±c h√†nh
5. Ki·ªÉm tra v√† c·∫•p ch·ª©ng ch·ªâ

H∆Ø·ªöNG D·∫™N TR·∫¢ L·ªúI:
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, th√¢n thi·ªán v√† chuy√™n nghi·ªáp
- T·∫≠p trung v√†o h·ªçc ti·∫øng Vi·ªát, ph√°t √¢m, quy tr√¨nh h·ªçc, app v√† g√≥i ƒëƒÉng k√Ω
- Khuy·∫øn kh√≠ch ng∆∞·ªùi d√πng d√πng th·ª≠ c√°c t√≠nh nƒÉng
- Kh√¥ng tr·∫£ l·ªùi c√°c c√¢u h·ªèi ngo√†i ph·∫°m vi Talkademy
- Gi·ªØ c√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn (d∆∞·ªõi 150 t·ª´)
`;

// H√†m g·ªçi Gemini API
export const getGeminiResponse = async (userMessage, conversationHistory = []) => {
    console.log('ü§ñ Starting Gemini API call...');
    console.log('üìù User message:', userMessage);
    console.log('üìö Conversation history length:', conversationHistory.length);

    console.log('üîë Using API Key:', API_KEY.substring(0, 10) + '...');

    try {
        // T·∫°o context t·ª´ l·ªãch s·ª≠ h·ªôi tho·∫°i
        const context = conversationHistory
            .slice(-5) // Ch·ªâ l·∫•y 5 tin nh·∫Øn g·∫ßn nh·∫•t
            .map(msg => `${msg.type === 'user' ? 'Ng∆∞·ªùi d√πng' : 'AI'}: ${msg.content}`)
            .join('\n');

        console.log('üîó Context created, length:', context.length);

        // T·∫°o prompt ƒë·∫ßy ƒë·ªß
        const fullPrompt = `${SYSTEM_PROMPT}

L·ªäCH S·ª¨ H·ªòI THO·∫†I:
${context}

NG∆Ø·ªúI D√ôNG V·ª™A H·ªéI: ${userMessage}

H√ÉY TR·∫¢ L·ªúI:`;

        console.log('üì§ Sending request to Gemini...');

        // S·ª≠ d·ª•ng model ƒë√£ kh·ªüi t·∫°o s·∫µn
        // Ho·∫∑c t·∫°o instance m·ªõi n·∫øu c·∫ßn
        const tempAI = new GoogleGenerativeAI(API_KEY);
        const tempModel = tempAI.getGenerativeModel({
            model: "gemini-2.0-flash-exp"
        });

        // G·ªçi API v·ªõi timeout
        const result = await Promise.race([
            tempModel.generateContent(fullPrompt),
            new Promise((_, reject) =>
                setTimeout(() => reject(new Error('Request timeout')), 30000)
            )
        ]);

        console.log('üì• Received response from Gemini');
        const response = await result.response;
        const text = response.text();

        console.log('‚úÖ Gemini API response:', text.substring(0, 100) + '...');
        return text.trim();
    } catch (error) {
        console.error('‚ùå Gemini API Error details:', {
            message: error.message,
            name: error.name,
            stack: error.stack?.substring(0, 200)
        });

        // Throw v·ªõi th√¥ng tin chi ti·∫øt h∆°n
        if (error.message.includes('API_KEY')) {
            throw new Error('API Key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
        } else if (error.message.includes('quota')) {
            throw new Error('ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n s·ª≠ d·ª•ng API');
        } else if (error.message.includes('timeout')) {
            throw new Error('K·∫øt n·ªëi qu√° ch·∫≠m, vui l√≤ng th·ª≠ l·∫°i');
        } else {
            throw new Error('C√≥ l·ªói x·∫£y ra v·ªõi d·ªãch v·ª• AI');
        }
    }
};

// Ch·ªâ export function ch√≠nh
export default { getGeminiResponse };
