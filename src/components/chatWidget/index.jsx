import React, { useState, useRef } from 'react';
import { Card, Input, Button, Avatar, Typography, Space, Tag, Badge } from 'antd';
import {
    SendOutlined,
    RobotOutlined,
    UserOutlined,
    SoundOutlined,
    BookOutlined,
    MobileOutlined,
    CrownOutlined,
    InfoCircleOutlined,
    MessageOutlined,
    CloseOutlined,
    CommentOutlined
} from '@ant-design/icons';
import './index.scss';
import mascotAI from '../../assets/Mascot/Asset 3talking.png';
import { getGeminiResponse } from '../../config/gemini';

const { Title, Text } = Typography;

const ChatWidget = () => {
    const [isOpen, setIsOpen] = useState(false);
    const [messages, setMessages] = useState([
        {
            id: 1,
            type: 'ai',
            content: 'Xin ch√†o! T√¥i l√† AI assistant c·ªßa Talkademy. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ trang web, gi·ªçng n√≥i ph√°t √¢m ti·∫øng Vi·ªát, quy tr√¨nh h·ªçc, ·ª©ng d·ª•ng v√† c√°c g√≥i ƒëƒÉng k√Ω. B·∫°n mu·ªën h·ªèi g√¨?',
            timestamp: new Date()
        }
    ]);
    const [inputValue, setInputValue] = useState('');
    const [isTyping, setIsTyping] = useState(false);
    const [hasNewMessage, setHasNewMessage] = useState(false);
    const messagesEndRef = useRef(null);
    const messagesContainerRef = useRef(null);

    const suggestedQuestions = [
        {
            icon: <InfoCircleOutlined />,
            text: 'Talkademy l√† g√¨?',
            category: 'website'
        },
        {
            icon: <SoundOutlined />,
            text: 'L√†m sao ƒë·ªÉ c·∫£i thi·ªán ph√°t √¢m ti·∫øng Vi·ªát?',
            category: 'pronunciation'
        },
        {
            icon: <BookOutlined />,
            text: 'Quy tr√¨nh h·ªçc nh∆∞ th·∫ø n√†o?',
            category: 'learning'
        },
        {
            icon: <MobileOutlined />,
            text: 'App c√≥ nh·ªØng t√≠nh nƒÉng g√¨?',
            category: 'app'
        },
        {
            icon: <CrownOutlined />,
            text: 'C√≥ nh·ªØng g√≥i h·ªçc n√†o?',
            category: 'packages'
        }
    ];

    // ƒê√£ x√≥a aiResponses - ch·ªâ s·ª≠ d·ª•ng Gemini API

    const scrollToBottom = () => {
        if (messagesContainerRef.current) {
            messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight;
        }
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    };

    const getAIResponse = async (userInput) => {
        console.log('ü§ñ ChatWidget: B·∫Øt ƒë·∫ßu g·ªçi AI v·ªõi input:', userInput);

        try {
            // Ch·ªâ s·ª≠ d·ª•ng Gemini API, kh√¥ng c√≥ fallback
            const response = await getGeminiResponse(userInput, messages);
            console.log('‚úÖ ChatWidget: Nh·∫≠n ƒë∆∞·ª£c response:', response.substring(0, 50) + '...');
            return response;
        } catch (error) {
            console.error('‚ùå ChatWidget: L·ªói AI API:', error.message);

            // Tr·∫£ v·ªÅ th√¥ng b√°o l·ªói c·ª• th·ªÉ
            return `Xin l·ªói! ${error.message} Vui l√≤ng th·ª≠ l·∫°i sau. üîÑ`;
        }
    };

    // ƒê√£ x√≥a findBestResponse - ch·ªâ s·ª≠ d·ª•ng Gemini API

    const handleSendMessage = async () => {
        if (!inputValue.trim()) return;

        const userMessage = {
            id: Date.now(),
            type: 'user',
            content: inputValue,
            timestamp: new Date()
        };

        const currentInput = inputValue;
        setMessages(prev => [...prev, userMessage]);
        setInputValue('');
        setIsTyping(true);

        // Cu·ªôn xu·ªëng ngay sau khi th√™m tin nh·∫Øn user
        setTimeout(() => {
            scrollToBottom();
        }, 50);

        // G·ªçi AI ƒë·ªÉ t·∫°o ph·∫£n h·ªìi
        setTimeout(async () => {
            try {
                const aiResponse = await getAIResponse(currentInput);
                const aiMessage = {
                    id: Date.now() + 1,
                    type: 'ai',
                    content: aiResponse,
                    timestamp: new Date()
                };

                setMessages(prev => [...prev, aiMessage]);
                setIsTyping(false);

                // N·∫øu chat ƒëang ƒë√≥ng, hi·ªÉn th·ªã th√¥ng b√°o c√≥ tin nh·∫Øn m·ªõi
                if (!isOpen) {
                    setHasNewMessage(true);
                }
            } catch (error) {
                console.error('Error in handleSendMessage:', error);
                // Fallback response khi c√≥ l·ªói
                const fallbackResponse = 'Xin l·ªói! T√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau. üîÑ';
                const aiMessage = {
                    id: Date.now() + 1,
                    type: 'ai',
                    content: fallbackResponse,
                    timestamp: new Date()
                };

                setMessages(prev => [...prev, aiMessage]);
                setIsTyping(false);

                if (!isOpen) {
                    setHasNewMessage(true);
                }
            }
        }, 1000 + Math.random() * 1000); // Gi·∫£m th·ªùi gian ch·ªù
    };

    const handleSuggestedQuestion = (question) => {
        setInputValue(question);
        // T·ª± ƒë·ªông g·ª≠i tin nh·∫Øn sau khi ch·ªçn c√¢u h·ªèi g·ª£i √Ω
        setTimeout(() => {
            const userMessage = {
                id: Date.now(),
                type: 'user',
                content: question,
                timestamp: new Date()
            };

            setMessages(prev => [...prev, userMessage]);
            setInputValue('');
            setIsTyping(true);

            // Cu·ªôn xu·ªëng ngay sau khi th√™m tin nh·∫Øn user
            setTimeout(() => {
                scrollToBottom();
            }, 50);

            // G·ªçi AI ƒë·ªÉ t·∫°o ph·∫£n h·ªìi
            setTimeout(async () => {
                try {
                    const aiResponse = await getAIResponse(question);
                    const aiMessage = {
                        id: Date.now() + 1,
                        type: 'ai',
                        content: aiResponse,
                        timestamp: new Date()
                    };

                    setMessages(prev => [...prev, aiMessage]);
                    setIsTyping(false);

                    // N·∫øu chat ƒëang ƒë√≥ng, hi·ªÉn th·ªã th√¥ng b√°o c√≥ tin nh·∫Øn m·ªõi
                    if (!isOpen) {
                        setHasNewMessage(true);
                    }
                } catch (error) {
                    console.error('Error in handleSuggestedQuestion:', error);
                    // Fallback response khi c√≥ l·ªói
                    const fallbackResponse = 'Xin l·ªói! T√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau. üîÑ';
                    const aiMessage = {
                        id: Date.now() + 1,
                        type: 'ai',
                        content: fallbackResponse,
                        timestamp: new Date()
                    };

                    setMessages(prev => [...prev, aiMessage]);
                    setIsTyping(false);

                    if (!isOpen) {
                        setHasNewMessage(true);
                    }
                }
            }, 1000 + Math.random() * 1000); // Gi·∫£m th·ªùi gian ch·ªù
        }, 200);
    };

    const handleKeyPress = (e) => {
        if (e.key === 'Enter') {
            handleSendMessage();
        }
    };

    const toggleChat = () => {
        setIsOpen(!isOpen);
        if (!isOpen) {
            setHasNewMessage(false);
        }
    };

    return (
        <div className="chat-widget">
            {/* Chat Window */}
            {isOpen && (
                <div className="chat-window">
                    <Card className="chat-container">
                        <div className="chat-header">
                            <div className="chat-title">
                                <img src={mascotAI} alt="AI Mascot" className="chat-mascot-icon" />
                                <div>
                                    <Title level={5} style={{ margin: 0 }}>AI Assistant</Title>
                                    <Text type="secondary" style={{ fontSize: '12px' }}>Talkademy</Text>
                                </div>
                            </div>
                            <Button
                                type="text"
                                icon={<CloseOutlined />}
                                onClick={toggleChat}
                                className="close-button"
                            />
                        </div>

                        <div className="chat-messages" ref={messagesContainerRef}>
                            {messages.map((message) => (
                                <div key={message.id} className={`message ${message.type}`}>
                                    {message.type === 'ai' ? (
                                        <div className="ai-avatar">
                                            <img src={mascotAI} alt="AI Mascot" />
                                        </div>
                                    ) : (
                                        <Avatar
                                            icon={<UserOutlined />}
                                            className="message-avatar user"
                                            size="small"
                                        />
                                    )}
                                    <div className="message-content">
                                        <div className={`message-bubble ${message.type}`}>
                                            <Text style={{ fontSize: '13px' }}>{message.content}</Text>
                                        </div>
                                        <Text className="message-time" type="secondary">
                                            {message.timestamp.toLocaleTimeString()}
                                        </Text>
                                    </div>
                                </div>
                            ))}

                            {isTyping && (
                                <div className="message ai">
                                    <div className="ai-avatar typing">
                                        <img src={mascotAI} alt="AI Mascot" />
                                    </div>
                                    <div className="message-content">
                                        <div className="message-bubble ai typing">
                                            <div className="typing-indicator">
                                                <span></span>
                                                <span></span>
                                                <span></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            )}
                            <div ref={messagesEndRef} />
                        </div>

                        <div className="suggested-questions">
                            <div className="questions-grid">
                                {suggestedQuestions.slice(0, 3).map((question, index) => (
                                    <Tag
                                        key={index}
                                        className="suggested-question"
                                        onClick={() => handleSuggestedQuestion(question.text)}
                                    >
                                        {question.icon}
                                        <span>{question.text}</span>
                                    </Tag>
                                ))}
                            </div>
                        </div>

                        <div className="chat-input">
                            <Input
                                value={inputValue}
                                onChange={(e) => setInputValue(e.target.value)}
                                onKeyPress={handleKeyPress}
                                placeholder="Nh·∫≠p c√¢u h·ªèi..."
                                suffix={
                                    <Button
                                        type="primary"
                                        icon={<SendOutlined />}
                                        onClick={handleSendMessage}
                                        disabled={!inputValue.trim()}
                                        className="send-button"
                                        size="small"
                                    />
                                }
                                size="small"
                            />
                        </div>
                    </Card>
                </div>
            )}

            {/* Chat Toggle Button */}
            <Badge
                dot={hasNewMessage}
                offset={[-5, 5]}
                className={hasNewMessage ? 'notification-badge' : ''}
            >
                <Button
                    type="primary"
                    shape="circle"
                    size="large"
                    onClick={toggleChat}
                    className="chat-toggle-button"
                >
                    {isOpen ? (
                        <CloseOutlined />
                    ) : (
                        <img src={mascotAI} alt="Chat with AI" className="toggle-mascot" />
                    )}
                </Button>
            </Badge>
        </div>
    );
};

export default ChatWidget;
